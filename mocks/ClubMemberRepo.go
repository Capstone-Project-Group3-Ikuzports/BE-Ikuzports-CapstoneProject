// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	clubMember "ikuzports/features/clubMember"

	mock "github.com/stretchr/testify/mock"
)

// ClubMemberRepo is an autogenerated mock type for the RepositoryInterface type
type ClubMemberRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *ClubMemberRepo) Create(input clubMember.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(clubMember.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ClubMemberRepo) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMember provides a mock function with given fields: idClub
func (_m *ClubMemberRepo) DeleteMember(idClub int) error {
	ret := _m.Called(idClub)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(idClub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindMember provides a mock function with given fields: id, idUser
func (_m *ClubMemberRepo) FindMember(id int, idUser int) (clubMember.Core, error) {
	ret := _m.Called(id, idUser)

	var r0 clubMember.Core
	if rf, ok := ret.Get(0).(func(int, int) clubMember.Core); ok {
		r0 = rf(id, idUser)
	} else {
		r0 = ret.Get(0).(clubMember.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *ClubMemberRepo) GetAll() ([]clubMember.Core, error) {
	ret := _m.Called()

	var r0 []clubMember.Core
	if rf, ok := ret.Get(0).(func() []clubMember.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clubMember.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByStatus provides a mock function with given fields: queryStatus
func (_m *ClubMemberRepo) GetAllByStatus(queryStatus string) ([]clubMember.Core, error) {
	ret := _m.Called(queryStatus)

	var r0 []clubMember.Core
	if rf, ok := ret.Get(0).(func(string) []clubMember.Core); ok {
		r0 = rf(queryStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clubMember.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(queryStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *ClubMemberRepo) GetById(id int) (clubMember.Core, error) {
	ret := _m.Called(id)

	var r0 clubMember.Core
	if rf, ok := ret.Get(0).(func(int) clubMember.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(clubMember.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *ClubMemberRepo) Update(input clubMember.Core, id int) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(clubMember.Core, int) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMember provides a mock function with given fields: id
func (_m *ClubMemberRepo) UpdateMember(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClubMemberRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewClubMemberRepo creates a new instance of ClubMemberRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClubMemberRepo(t mockConstructorTestingTNewClubMemberRepo) *ClubMemberRepo {
	mock := &ClubMemberRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
