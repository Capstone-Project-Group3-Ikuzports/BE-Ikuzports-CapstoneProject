// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	chat "ikuzports/features/chat"
	club "ikuzports/features/club"

	clubActivity "ikuzports/features/clubActivity"

	clubMember "ikuzports/features/clubMember"

	galery "ikuzports/features/galery"

	mock "github.com/stretchr/testify/mock"
)

// ClubRepo is an autogenerated mock type for the RepositoryInterface type
type ClubRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: input, id
func (_m *ClubRepo) Create(input club.Core, id int) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(club.Core, int) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ClubRepo) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActivities provides a mock function with given fields: id
func (_m *ClubRepo) GetActivities(id int) ([]clubActivity.Core, error) {
	ret := _m.Called(id)

	var r0 []clubActivity.Core
	if rf, ok := ret.Get(0).(func(int) []clubActivity.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clubActivity.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: offset, limit
func (_m *ClubRepo) GetAll(offset int, limit int) ([]club.Core, int, error) {
	ret := _m.Called(offset, limit)

	var r0 []club.Core
	if rf, ok := ret.Get(0).(func(int, int) []club.Core); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]club.Core)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(int, int) int); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllWithSearch provides a mock function with given fields: queryName, queryCity, queryCategoryID, offset, limit
func (_m *ClubRepo) GetAllWithSearch(queryName string, queryCity string, queryCategoryID int, offset int, limit int) ([]club.Core, int, error) {
	ret := _m.Called(queryName, queryCity, queryCategoryID, offset, limit)

	var r0 []club.Core
	if rf, ok := ret.Get(0).(func(string, string, int, int, int) []club.Core); ok {
		r0 = rf(queryName, queryCity, queryCategoryID, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]club.Core)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, string, int, int, int) int); ok {
		r1 = rf(queryName, queryCity, queryCategoryID, offset, limit)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int, int, int) error); ok {
		r2 = rf(queryName, queryCity, queryCategoryID, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetById provides a mock function with given fields: id
func (_m *ClubRepo) GetById(id int) (club.Core, error) {
	ret := _m.Called(id)

	var r0 club.Core
	if rf, ok := ret.Get(0).(func(int) club.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(club.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChats provides a mock function with given fields: id
func (_m *ClubRepo) GetChats(id int) ([]chat.Core, error) {
	ret := _m.Called(id)

	var r0 []chat.Core
	if rf, ok := ret.Get(0).(func(int) []chat.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chat.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGaleries provides a mock function with given fields: id
func (_m *ClubRepo) GetGaleries(id int) ([]galery.Core, error) {
	ret := _m.Called(id)

	var r0 []galery.Core
	if rf, ok := ret.Get(0).(func(int) []galery.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]galery.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastID provides a mock function with given fields:
func (_m *ClubRepo) GetLastID() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: id
func (_m *ClubRepo) GetMembers(id int) ([]clubMember.Core, error) {
	ret := _m.Called(id)

	var r0 []clubMember.Core
	if rf, ok := ret.Get(0).(func(int) []clubMember.Core); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clubMember.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatus provides a mock function with given fields: id, userId
func (_m *ClubRepo) GetStatus(id int, userId int) (club.Status, error) {
	ret := _m.Called(id, userId)

	var r0 club.Status
	if rf, ok := ret.Get(0).(func(int, int) club.Status); ok {
		r0 = rf(id, userId)
	} else {
		r0 = ret.Get(0).(club.Status)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *ClubRepo) Update(input club.Core, id int) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(club.Core, int) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMember provides a mock function with given fields: id
func (_m *ClubRepo) UpdateMember(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClubRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewClubRepo creates a new instance of ClubRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClubRepo(t mockConstructorTestingTNewClubRepo) *ClubRepo {
	mock := &ClubRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
