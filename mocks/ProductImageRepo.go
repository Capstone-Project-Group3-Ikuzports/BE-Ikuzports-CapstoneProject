// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	productImage "ikuzports/features/productImage"

	mock "github.com/stretchr/testify/mock"
)

// ProductImageRepo is an autogenerated mock type for the RepositoryInterface type
type ProductImageRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *ProductImageRepo) Create(data productImage.ProductImageCore) (int, error) {
	ret := _m.Called(data)

	var r0 int
	if rf, ok := ret.Get(0).(func(productImage.ProductImageCore) int); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(productImage.ProductImageCore) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *ProductImageRepo) GetAll() ([]productImage.ProductImageCore, error) {
	ret := _m.Called()

	var r0 []productImage.ProductImageCore
	if rf, ok := ret.Get(0).(func() []productImage.ProductImageCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]productImage.ProductImageCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *ProductImageRepo) GetByID(id int) (productImage.ProductImageCore, error) {
	ret := _m.Called(id)

	var r0 productImage.ProductImageCore
	if rf, ok := ret.Get(0).(func(int) productImage.ProductImageCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(productImage.ProductImageCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductImageRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductImageRepo creates a new instance of ProductImageRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductImageRepo(t mockConstructorTestingTNewProductImageRepo) *ProductImageRepo {
	mock := &ProductImageRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
