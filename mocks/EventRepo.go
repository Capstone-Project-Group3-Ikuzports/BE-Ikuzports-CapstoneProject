// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	event "ikuzports/features/event"

	mock "github.com/stretchr/testify/mock"
)

// EventRepo is an autogenerated mock type for the RepositoryInterface type
type EventRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *EventRepo) Create(input event.EventCore) (int, error) {
	ret := _m.Called(input)

	var r0 int
	if rf, ok := ret.Get(0).(func(event.EventCore) int); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(event.EventCore) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *EventRepo) Delete(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: limit, offset
func (_m *EventRepo) GetAll(limit int, offset int) ([]event.EventCore, error) {
	ret := _m.Called(limit, offset)

	var r0 []event.EventCore
	if rf, ok := ret.Get(0).(func(int, int) []event.EventCore); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.EventCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllFilter provides a mock function with given fields: offset, limit, queryCategoryID, queryCity, queryStatus
func (_m *EventRepo) GetAllFilter(offset int, limit int, queryCategoryID int, queryCity string, queryStatus string) ([]event.EventCore, error) {
	ret := _m.Called(offset, limit, queryCategoryID, queryCity, queryStatus)

	var r0 []event.EventCore
	if rf, ok := ret.Get(0).(func(int, int, int, string, string) []event.EventCore); ok {
		r0 = rf(offset, limit, queryCategoryID, queryCity, queryStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.EventCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, int, string, string) error); ok {
		r1 = rf(offset, limit, queryCategoryID, queryCity, queryStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *EventRepo) GetByID(id int) (event.EventCore, error) {
	ret := _m.Called(id)

	var r0 event.EventCore
	if rf, ok := ret.Get(0).(func(int) event.EventCore); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(event.EventCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDate provides a mock function with given fields:
func (_m *EventRepo) GetDate() ([]event.EventCore, error) {
	ret := _m.Called()

	var r0 []event.EventCore
	if rf, ok := ret.Get(0).(func() []event.EventCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]event.EventCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastID provides a mock function with given fields:
func (_m *EventRepo) GetLastID() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: id, status
func (_m *EventRepo) UpdateStatus(id int, status string) (int, error) {
	ret := _m.Called(id, status)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, string) int); ok {
		r0 = rf(id, status)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(id, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTotal provides a mock function with given fields: id
func (_m *EventRepo) UpdateTotal(id int) (int, error) {
	ret := _m.Called(id)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEventRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventRepo creates a new instance of EventRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventRepo(t mockConstructorTestingTNewEventRepo) *EventRepo {
	mock := &EventRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
