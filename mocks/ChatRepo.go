// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	chat "ikuzports/features/chat"

	mock "github.com/stretchr/testify/mock"
)

// ChatRepo is an autogenerated mock type for the RepositoryInterface type
type ChatRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: input
func (_m *ChatRepo) Create(input chat.Core) error {
	ret := _m.Called(input)

	var r0 error
	if rf, ok := ret.Get(0).(func(chat.Core) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ChatRepo) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindMember provides a mock function with given fields: id, idUser
func (_m *ChatRepo) FindMember(id int, idUser int) (chat.Core, error) {
	ret := _m.Called(id, idUser)

	var r0 chat.Core
	if rf, ok := ret.Get(0).(func(int, int) chat.Core); ok {
		r0 = rf(id, idUser)
	} else {
		r0 = ret.Get(0).(chat.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(id, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *ChatRepo) GetAll() ([]chat.Core, error) {
	ret := _m.Called()

	var r0 []chat.Core
	if rf, ok := ret.Get(0).(func() []chat.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]chat.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *ChatRepo) GetById(id int) (chat.Core, error) {
	ret := _m.Called(id)

	var r0 chat.Core
	if rf, ok := ret.Get(0).(func(int) chat.Core); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(chat.Core)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewChatRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewChatRepo creates a new instance of ChatRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChatRepo(t mockConstructorTestingTNewChatRepo) *ChatRepo {
	mock := &ChatRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
