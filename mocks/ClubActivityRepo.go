// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	clubActivity "ikuzports/features/clubActivity"

	mock "github.com/stretchr/testify/mock"
)

// ClubActivityRepo is an autogenerated mock type for the RepositoryInterface type
type ClubActivityRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: input, idUser
func (_m *ClubActivityRepo) Create(input clubActivity.Core, idUser int) error {
	ret := _m.Called(input, idUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(clubActivity.Core, int) error); ok {
		r0 = rf(input, idUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ClubActivityRepo) GetAll() ([]clubActivity.Core, error) {
	ret := _m.Called()

	var r0 []clubActivity.Core
	if rf, ok := ret.Get(0).(func() []clubActivity.Core); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clubActivity.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByClubId provides a mock function with given fields: queryClubId
func (_m *ClubActivityRepo) GetAllByClubId(queryClubId uint) ([]clubActivity.Core, error) {
	ret := _m.Called(queryClubId)

	var r0 []clubActivity.Core
	if rf, ok := ret.Get(0).(func(uint) []clubActivity.Core); ok {
		r0 = rf(queryClubId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]clubActivity.Core)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(queryClubId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: input, id
func (_m *ClubActivityRepo) Update(input clubActivity.Core, id int) error {
	ret := _m.Called(input, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(clubActivity.Core, int) error); ok {
		r0 = rf(input, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClubActivityRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewClubActivityRepo creates a new instance of ClubActivityRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClubActivityRepo(t mockConstructorTestingTNewClubActivityRepo) *ClubActivityRepo {
	mock := &ClubActivityRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
